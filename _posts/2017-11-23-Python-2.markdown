---
layout: post
title:  "Python : suite"
date:   2017-11-23 19:25:00 +0100
tags: python
feature-img: "assets/img/pexels/python.png"
thumbnail: "assets/img/thumbnails/python.jpg"
---

Bonjour à tous et toutes !

Aujourd'hui, faisons (encore) un peu de Python !

En particulier, nous allons faire des choses un peu plus complexes que la dernière fois.

Si vous n'êtes pas encore à l'aise avec la première partie, refaites cette dernière jusqu'à être bien au point. Sinon, en avant !!!

# Une nouvelle expérience

Rappelez vous le premier tutoriel, nous avions utiliser la console. Et bien aujourd'hui nous allons faire quelque chose d'un peu plus complexe : des scripts !

Pour se faire, retourner dans le dossier où était le raccourci pour la commande et choisissez "Idle Python 3.6"

*J'ai fait ça mais c'est toujours une console, mais en blanc...*

Oui, c'est vrai. Mais en cliquant sur **File > New file**, on ouvre une nouvelle fenêtre intitulée "Untitled".

*Mouais, pas très interessant tout ça*

Faites un petit copier-coller dans cette fenêtre
{% highlight python %}
def helloWorld(age):
	print("Je suis une banane flambée et j'ai "+str(age)+" ans !")
{%endhighlight%}

Sauvegardez et appuyer sur **F5** ou dans le menu **Run > Run module**

Puis dans la fenêtre console, tapez :

{% highlight python %}
helloWorld(5)
{%endhighlight%}

*Mais je ne suis pas une banane flambée et je n'ai pas cinq ans...*

Bon et bien changer le 5 par votre âge.

*Je ne suis pas une banane flambée*

Ca, on n'y peut pas grand chose : la fonction **helloWorld** n'a qu'un seul argument : **age**.

*Je suis largué là...*

# Fonctions vitales

Deux nouvelles notions ont été introduites : la fonction et l'argument.

La **fonction** représente ici un ensemble d'instructions (les lignes de code) faisant partie d'un ensemble organisé (programme, script) ayant la capacité d'effectuer un calcul ou une tâche.

Dans notre cas, la fonction **helloWorld** possède une instruction (print) et un argument (age).

Les arguments sont les entrées de la fonction : ici l'âge.

*print* est finalement une fonction de base de Python : elle affiche son argument dans la console (sous réserve que l'argument soit affichable).

**Exercice** : modifiez le code de la fonction **helloWorld** pour que vous ne soyez plus une banane flambée (enfin).


# Quelques jeux avec les fonctions

Je vous propose ici quelques activités : jouons un peu avec ces satanés fonctions.

### Activité 1 : argumentation

Dans la fonction **helloWorld**, changez l'argument pour qu'il soit :

1. 557
2. 25.5
3. "oursin" (**Attention aux "" autour d'"oursin"**)

L'argument que vous entrez est directement retranscrit, chouette non ?

Maintenant, tapez :

{% highlight python %}
helloWorld()
{%endhighlight%}

*Ca recommence, je me fais insulter*

Lisons un peu.

{% highlight python %}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: helloWorld() missing 1 required positional argument: 'age'
{%endhighlight%}

Sans être un expert en anglais, on peut comprendre que la fonction attendait 1 argument et n'a rien reçu et donc se plaint.

Donner lui à manger un argument de votre choix. 

### Activité 2 : string de caractère

Nous allons nous pencher sur les **chaines de caractères**. 

Pour faire simple, une chaine de caractère est tout simplement un ensemble de caractères mis les uns à la suite des autres.

*Je ne suis pas aussi bête...*

Peut-être, mais avoir en tête cette vision est utile pour la suite.

Une chaine de caractère, ou **string** en anglais, peut être définie de plusieurs manières en Python :
 
{% highlight python %}
'Comme-ci'
"Ou comme ça"
{%endhighlight%}

Et on peut faire des opérations sur les strings :

{% highlight python %}
>>> 'Comme-ci'+"Ou comme ça"
'Comme-ciOu comme ça'
>>>3*'Comme-ci'
'Comme-ciComme-ciComme-ci'
{%endhighlight%}

Si je veux avoir la cinquième lettre de la chaine, il suffit d'écrire :

{% highlight python %}
>>> 'Comme-ci'[4]
'-'
{%endhighlight%}

*On a de le cinquième, pas le quatrième*

Comme souvent en informatique, la numérotation commence à 0. Pour preuve :

{% highlight python %}
>>> 'Comme-ci'[0]
'C'
{%endhighlight%}

Par contre, si je veux le 23ème caractère (qui n'existe pas), j'aurai :

{% highlight python %}
>>> 'Comme-ci'[23]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
{%endhighlight%}

*Encore des insultes...*

Et retenez bien celle-la, car vous allez la recontrer souvent avec les listes.

Il se trouve que Python gère les indices négatifs.

*Pardon ? Comment il pourrait y avoir un -1ème caratère*

Python va en fait parcourir la chaine non pas du début, mais de la fin.

**Exercice** En sachant que 'Comme-ci'est de longueur 8, en déduire :
1. L'indice maximal admissible avec un indice positif
2. L'indice minimal admissible avec un indice négatif

Même chose avec "Banane flambée".

*Indication : la somme des deux indices fait -1*

### Activité 3 : votre première fonction

Dans cette activité, vous allez faire votre première fonction qui va faire une opération particulière sur deux arguments qui seront des nombres. Commençons par un exemple.

Dans le même fichier que précedement, à la suite de **helloWorld**, écrivez :

{% highlight python %}
def maFonctionPresqueAMoi(nombre1, nombre2):
	resultat = nombre1 + nombre2*nombre1
	return resultat
{%endhighlight%}

*C'est quoi ce resultat ? Et c'est quoi return ?*

On se calme. La ligne "resultat = nombre1 + nombre2*nombre1" est une affectation de **variable**

Quand on travaille sur un programme, il est préférable de stocker ses résultats dans des variables, que l'on peut changer au cours du temps. Il convient aussi de leur donner des **noms explicites**, parce que "crabeTambour" est peut-être joli, mais pour quelqu'un qui relira votre code, ce sera tout sauf explicite.

Une variable est donc définie par "nom_variable = instruction". "resultat" est donc le nom de la variable et "nombre1 + nombre2*nombre1" l'instruction.

Le nom d'une variable ne doit pas comporter d'accents, d'espaces, de caractères déjà utilisés (+,-,/,* etc...) ou de chiffres au début.

| Correct       |     Incorrect   |   
| ------------- | -------------   |
| banane       |     banane-Flambee     |  
| resultat     |     résultat |
| omicron_persei_8        |      (1)Ceres     |  


"return" est un **mot-clé** Python qui signifie à la fonction qu'elle a terminé et qu'elle doit renvoyer une sortie.

*Mais la fonction **helloWorld** affiche quelque chose et il n'y a pas de return*

La fonction **helloWorld** est une fonction qui renvoie quelque chose, toutes les fonctions font ça. C'est un "None" : le "rien" de Python.

**Exercice** : Vérifiez le.
*Indication : affecter la fonction dans une variable et faire print(<nom de la variable>)*

Pour vérifier que l'on'obtient bien quelque chose, tapez :

{% highlight python %}
>>>aTester = maFonctionPresqueAMoi(5, 6):
>>>aTester
{%endhighlight%}

Vous devriez voir affiché '35', qui n'est pas None : la fonction a donc renvoyé quelque chose.

Si d'aventure, vous voudriez faire une fonction qui ne "renvoie rien", utilisez **pass** à la place de **return <variable>**.

**Exercice**
Vous allez maintenant être jeté dans le grand enclos à Python.

1. Modifiez maFonctionPresqueAMoi pour que nombre1 ne soit présent qu'une seule fois dans l'affectation de resultat
2. Créer une fonction maFonctionAMoi qui à partir de deux arguments, renvoie la somme du premier avec la multiplication du second et de la différence des deux.
3. Vérifiez que l'on ne peut pas mettre deux arguments de types différents : nombre et string par exemple.

Have fun !
















